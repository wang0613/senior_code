HTTP/1.1 200

Content-Type: text/html;charset=UTF-8
Content-Length: 110
Date: Fri, 22 May 2020 07:22:29 GMT

GET /day13_response/index.jsp HTTP/1.1
Host: localhost:8080
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36
Sec-Fetch-Dest: document
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Sec-Fetch-Site: none
Sec-Fetch-Mode: navigate
Sec-Fetch-User: ?1
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.9
Cookie: JSESSIONID=BDA42560F8970D8C9661D672CAF0229C; Webstorm-6192a51e=47a1f576-939b-4667-9b8c-ee89a406b0a9; Idea-b919fb8f=2cc1d14c-c7aa-43e0-9921-aba936dca578; Webstorm-80c937d6=0ae5f6a8-5788-4a2a-b703-b6bb7c3fa1cb


<html>
  <head>
    <title>Response</title>
  </head>
  <body>
  hello response
  </body>
</html>
_____________________________________________
请求消息：客户端发送到都服务器的数据
*数据格式：
    1.请求行
    2.请求头
    3.请求空行
    4.请求体
响应消息：服务器端发送给客户端的数据
*数据格式：
    1.响应行
        1.组成：协议/版本 响应状态码 转态码描述
            *HTTP/1.1    200       ok
        2.响应状态码：服务器告诉客户端，浏览器本次请求和响应的一个状态
            *1.状态码都是三位数字
            *2.分类：
                1.1xx:服务器接收客户端消息，但没有接收完成，等待一段时间后，发送1xx的状态码
                2.2xx：成功，代表：200
                3.3xx：重定向，代表：302，类似转发，304：访问缓存（浏览器本地缓存）
                4.4xx: 客户端错误
                    代表：404（请求路径没有对应的资源） 405：（请求方式没有对应的doXX方法）
                5.5xx：服务端错误 代表： 500 服务器内部异常
    2.响应头
        1.格式: 头：值
        2.常见的响应头：
            Content-Type: text/html;charset=UTF-8 ：
            服务器告诉客户端本次响应体数据格式，以及编码格式
            Content-disposition ：服务器告诉客户端以什么格式打开响应体数据
                *in-line默认值，在当前页面内打开
                *attachment；filename= xxx：以附件的形式打开，文件下载
    3.响应空行
    4.响应体
response对象：
    功能：设置响应消息
        1.设置响应行
            格式：HTTP/1.1  200  ok
            设置状态码： setStatus(int sc);
        2.设置响应头
            setHeader(String name,String value)
        3.设置响应体
            获取输出流：
             PrintWriter        getWriter
             ServletOutPutStream     getOutputStream
            使用输出流：将数据输出到客户端浏览器中

ServletContext对象：
1. 概念：代表整个web应用，可以和程序的容器(服务器)来通信
2. 获取：
	1. 通过request对象获取
		request.getServletContext();
	2. 通过HttpServlet获取
		this.getServletContext();
3. 功能：
	1. 获取MIME类型：
		* MIME类型:在互联网通信过程中定义的一种文件数据类型
			* 格式： 大类型/小类型   text/html		image/jpeg

		* 获取：String getMimeType(String file)
	2. 域对象：共享数据
		1. setAttribute(String name,Object value)
		2. getAttribute(String name)
		3. removeAttribute(String name)

		* ServletContext对象范围：所有用户所有请求的数据
	3. 获取文件的真实(服务器)路径
		1. 方法：String getRealPath(String path)
			 String b = context.getRealPath("/b.txt");//web目录下资源访问
	         System.out.println(b);

	        String c = context.getRealPath("/WEB-INF/c.txt");//WEB-INF目录下的资源访问
	        System.out.println(c);

	        String a = context.getRealPath("/WEB-INF/classes/a.txt");//src目录下的资源访问
	        System.out.println(a);

